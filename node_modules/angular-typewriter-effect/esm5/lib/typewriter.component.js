/**
 * @fileoverview added by tsickle
 * Generated from: lib/typewriter.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
var TypewriterComponent = /** @class */ (function () {
    function TypewriterComponent() {
        this.writeText = '';
        this.loopNumber = 0;
        this.isDeleting = false;
    }
    /**
     * @return {?}
     */
    TypewriterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.writeLine(); }), 500);
    };
    /**
     * @return {?}
     */
    TypewriterComponent.prototype.writeLine = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var i = this.loopNumber % this.StringList.length;
        /** @type {?} */
        var fullTxt = this.StringList[i];
        if (this.isDeleting) {
            this.writeText = fullTxt.substring(0, this.writeText.length - 1);
        }
        else {
            this.writeText = fullTxt.substring(0, this.writeText.length + 1);
        }
        /** @type {?} */
        var delTime = 90;
        if (this.isDeleting) {
            delTime /= 2;
        }
        if (!this.isDeleting && this.writeText === fullTxt) {
            delTime = this.speed || 700;
            this.isDeleting = true;
        }
        else if (this.isDeleting && this.writeText === '') {
            this.isDeleting = false, this.loopNumber++;
            delTime = this.speed || 700;
        }
        setTimeout((/**
         * @return {?}
         */
        function () { return tslib_1.__awaiter(_this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, this.writeLine()];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); }); }), delTime);
    };
    TypewriterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngtypewriter',
                    template: "\n  <span style=\"border-right:1px solid #666;animation:blink 1s; padding-right:3px;\">{{writeText}}</span>\n  ",
                    styles: ["@-webkit-keyframes blink{50%{border-right:transparent}}@keyframes blink{50%{border-right:transparent}}"]
                }] }
    ];
    /** @nocollapse */
    TypewriterComponent.ctorParameters = function () { return []; };
    TypewriterComponent.propDecorators = {
        StringList: [{ type: Input }],
        speed: [{ type: Input }]
    };
    return TypewriterComponent;
}());
export { TypewriterComponent };
if (false) {
    /** @type {?} */
    TypewriterComponent.prototype.StringList;
    /** @type {?} */
    TypewriterComponent.prototype.speed;
    /** @type {?} */
    TypewriterComponent.prototype.writeText;
    /** @type {?} */
    TypewriterComponent.prototype.loopNumber;
    /** @type {?} */
    TypewriterComponent.prototype.isDeleting;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXdyaXRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXR5cGV3cml0ZXItZWZmZWN0LyIsInNvdXJjZXMiOlsibGliL3R5cGV3cml0ZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pEO0lBYUU7UUFEQSxjQUFTLEdBQUUsRUFBRSxDQUFDO1FBQUMsZUFBVSxHQUFFLENBQUMsQ0FBQztRQUFDLGVBQVUsR0FBRSxLQUFLLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVqQixzQ0FBUTs7O0lBQVI7UUFBQSxpQkFFQztRQURDLFVBQVU7OztRQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsU0FBUyxFQUFFLEVBQWhCLENBQWdCLEdBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQzs7OztJQUVELHVDQUFTOzs7SUFBVDtRQUFBLGlCQW9CQzs7WUFuQkssQ0FBQyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNOztZQUM1QyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFFaEMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDakU7YUFBTTtZQUNMLElBQUksQ0FBQyxTQUFTLEdBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUE7U0FDaEU7O1lBRUcsT0FBTyxHQUFHLEVBQUU7UUFDaEIsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQztTQUFFO1FBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssT0FBTyxFQUFFO1lBQ2xELE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLEdBQUcsQ0FBQztZQUM1QixJQUFJLENBQUMsVUFBVSxHQUFFLElBQUksQ0FBQTtTQUN0QjthQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLEVBQUUsRUFBRTtZQUNuRCxJQUFJLENBQUMsVUFBVSxHQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7WUFDekMsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLElBQUksR0FBRyxDQUFDO1NBQzdCO1FBQ0QsVUFBVTs7O1FBQUM7O3dCQUFZLHFCQUFNLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQTt3QkFBdEIsc0JBQUEsU0FBc0IsRUFBQTs7aUJBQUEsR0FBRSxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDOztnQkF2Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxjQUFjO29CQUN4QixRQUFRLEVBQUUsaUhBRVQ7O2lCQUVGOzs7Ozs2QkFHRSxLQUFLO3dCQUVMLEtBQUs7O0lBNkJSLDBCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0FqQ1ksbUJBQW1COzs7SUFFOUIseUNBQW1DOztJQUVuQyxvQ0FBZTs7SUFDZix3Q0FBYzs7SUFBQyx5Q0FBYzs7SUFBQyx5Q0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25ndHlwZXdyaXRlcicsXG4gIHRlbXBsYXRlOiBgXG4gIDxzcGFuIHN0eWxlPVwiYm9yZGVyLXJpZ2h0OjFweCBzb2xpZCAjNjY2O2FuaW1hdGlvbjpibGluayAxczsgcGFkZGluZy1yaWdodDozcHg7XCI+e3t3cml0ZVRleHR9fTwvc3Bhbj5cbiAgYCxcbiAgc3R5bGVVcmxzOiBbJy4vdHlwZXdyaXRlci5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBUeXBld3JpdGVyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBTdHJpbmdMaXN0OiBBcnJheTxzdHJpbmc+O1xuXG4gIEBJbnB1dCgpIHNwZWVkO1xuICB3cml0ZVRleHQ9ICcnOyBsb29wTnVtYmVyPSAwOyBpc0RlbGV0aW5nPSBmYWxzZTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMud3JpdGVMaW5lKCksIDUwMCk7IFxuICB9XG5cbiAgd3JpdGVMaW5lKCkge1xuICAgIGxldCBpID0gdGhpcy5sb29wTnVtYmVyICUgdGhpcy5TdHJpbmdMaXN0Lmxlbmd0aDtcbiAgICBsZXQgZnVsbFR4dCA9IHRoaXMuU3RyaW5nTGlzdFtpXTtcblxuICAgIGlmICh0aGlzLmlzRGVsZXRpbmcpIHtcbiAgICAgICB0aGlzLndyaXRlVGV4dD0gZnVsbFR4dC5zdWJzdHJpbmcoMCwgdGhpcy53cml0ZVRleHQubGVuZ3RoIC0gMSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53cml0ZVRleHQ9IGZ1bGxUeHQuc3Vic3RyaW5nKDAsIHRoaXMud3JpdGVUZXh0Lmxlbmd0aCArIDEpXG4gICAgfVxuXG4gICAgbGV0IGRlbFRpbWUgPSA5MDtcbiAgICBpZiAodGhpcy5pc0RlbGV0aW5nKSB7IGRlbFRpbWUgLz0gMjsgfVxuICAgIGlmICghdGhpcy5pc0RlbGV0aW5nICYmIHRoaXMud3JpdGVUZXh0ID09PSBmdWxsVHh0KSB7XG4gICAgICBkZWxUaW1lID0gdGhpcy5zcGVlZCB8fCA3MDA7XG4gICAgICB0aGlzLmlzRGVsZXRpbmc9IHRydWVcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNEZWxldGluZyAmJiB0aGlzLndyaXRlVGV4dCA9PT0gJycpIHtcbiAgICAgIHRoaXMuaXNEZWxldGluZz0gZmFsc2UsIHRoaXMubG9vcE51bWJlcisrXG4gICAgICBkZWxUaW1lID0gdGhpcy5zcGVlZCB8fCA3MDA7XG4gICAgfVxuICAgIHNldFRpbWVvdXQoYXN5bmMgKCkgPT4gYXdhaXQgdGhpcy53cml0ZUxpbmUoKSwgZGVsVGltZSk7XG4gIH1cbn1cbiJdfQ==